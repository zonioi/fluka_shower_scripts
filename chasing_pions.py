import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import uproot # If we are working with the root file


# The root file contains three trees, main, first and last
filename = 'fs_1_100_0.root'

with uproot.open(filename) as f:
    print (f.keys())

# We can take a look what is inside of 'first' tree for example
with uproot.open('fs_1_100_0.root:first') as f:
    print (f.keys())

# Finally we can charge this information into a data frame for analysis. We can read all inside the three or,
# to save memory, only the variables of interest. In case you want all the variables just write f.keys() as arrays

# For chasing pions and then muons I'm charging the variables information inside the arrays. The index is the unique_particle_id

with uproot.open('fs_1_100_0.root') as f:
    #main = f['main'].arrays(['x', 'z'], library='pd')
    first = f['first'].arrays(['index', 'id','ltrack', 'icode', 'unique_id_anc','id_anc', 'icode_anc', 'z', 'ekin'], library='pd')
    last = f['last'].arrays(['index', 'id','ltrack', 'icode' ,'unique_id_anc','id_anc', 'icode_anc', 'z', 'ekin'], library='pd')

#Find pions from K+ decay from 'first'
# Above we find multiple pions decays from K+ and K-. The first two triple decays sre extracted from first df. And the last two from last df. It should be the same.

decay_Kp_f = first[(((first['id'] == 13) | (first['id'] == 14))) & (first['id_anc'] == 15) & (first['icode_anc'] == 102)] # where Kp is positive Kaon (id = 15)

triple_decay_Kp_f = decay_Kp_f[decay_Kp_f.duplicated(subset='unique_id_anc', keep = False)] # Maintain only the duplicates on unique_id_anc, spotting multiple decays from single Kaon +
print ('Number of triple decays from K+',len(triple_decay_Kp_f/3))

#Find pions from K- decay from first
decay_Kn_f = first[(((first['id'] == 13) | (first['id'] == 14))) & (first['id_anc'] == 16) & (first['icode_anc'] == 102)] # where Kp is negative Kaon (id = 16)

triple_decay_Kn_f = decay_Kn_f[decay_Kn_f.duplicated(subset='unique_id_anc', keep = False)] # Maintain only the duplicates on unique_id_anc, spotting multiple decays from single Kaon -
print ('Number of triple decays from K-',len(triple_decay_Kn_f/3))

#Find pions from K+ decay from 'last'
decay_Kp_l = last[(((last['id'] == 13) | (last['id'] == 14))) & (first['id_anc'] == 15) & (last['icode_anc'] == 102)] # NOTE THAT WE USE id_anc from first. Otherwise, if the particle has been transported, the parent_id is itself.

triple_decay_Kp_l = decay_Kp_l[decay_Kp_l.duplicated(subset='unique_id_anc', keep = False)]
print ('Number of triple decays from K+',len(triple_decay_Kp_l/3)) # print the number of triple decays

#Find pions from K- decay from 'last'
decay_Kn_l = last[(((last['id'] == 13) | (last['id'] == 14))) & (first['id_anc'] == 16) & (last['icode_anc'] == 102)] # NOTE THAT WE USE id_anc from first. Otherwise, if the particle has been transported, the parent_id is itself.

triple_decay_Kn_l = decay_Kn_l[decay_Kn_l.duplicated(subset='unique_id_anc', keep = False)]
print ('Number of triple decays from K-',len(triple_decay_Kn_l/3)) # print the number of triple decays
### Next steps are following this pions to get the muons generated by them. Tricky Part: Not each pion will decay directly in a muon. That means some of them could be involved in an inelastic collision (101) and more than three muons could came from thes triple decays.


### Another approach is to make the inverse process. Start with muons that arrived at certain underground layer (last) and check they parent and grandparent to get the ones coming from a triple pion decay.

for i in range
